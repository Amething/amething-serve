plugins {
	id 'org.springframework.boot' version '2.5.2'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id "com.ewerk.gradle.plugins.querydsl" version "1.0.10" //Querydsl 설정
	id 'java'
	id 'jacoco' // test coverage 를 위한 jacoco
}

group = 'com.server'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

jacoco {
	toolVersion = '0.8.5' // jacoco version
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
	querydsl.extendsFrom compileClasspath
}

repositories {
	mavenCentral()
}

dependencies {
	// *** Spring Starter ***
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-web'

	// *** OAuth2 ***
	implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'

	// *** Querydsl ***
	implementation 'com.querydsl:querydsl-jpa'

	// *** Lombok ***
	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'com.h2database:h2'
	annotationProcessor 'org.projectlombok:lombok'

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'

	// *** Swagger UI ***
	implementation group: 'io.springfox', name: 'springfox-swagger-ui', version: '2.9.2'
	implementation group: 'io.springfox', name: 'springfox-swagger2', version: '2.9.2'

	implementation group: 'org.modelmapper', name: 'modelmapper', version: '2.3.8'
	implementation group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5'

	// *** JsonWebToken *** //
	implementation 'io.jsonwebtoken:jjwt-api:0.11.2'
	runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.2'
	runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.2'
}
tasks.named('test') {
	useJUnitPlatform()
}

def querydslDir = "$buildDir/generated/querydsl"

jacocoTestReport {
	reports {
		html.enabled(true)
		xml.enabled(true)
		csv.enabled(true)
	}
	afterEvaluate {
		classDirectories.from = files(classDirectories.files.collect {
			fileTree(dir: it, exclude: [
				//나중에 테스트 커버리지에서 제외할 패키지를 명시하는 곳
			])
		})
	}
	finalizedBy 'jacocoTestCoverageVerification'
}

jacocoTestCoverageVerification {
	violationRules {
		rule {
			enabled(true)

			element = 'CLASS'

			limit {
				counter = "INSTRUCTION"
				value = 'COVEREDRATIO'
				minimum = 0.00
			}
		}
	}
}

test {
	jacoco {
		enabled = true
		destinationFile = file("$buildDir/jacoco/jacoco.exec")
		includes = []
		excludes = []
		excludeClassLoaders = []
		includeNoLocationClasses = false
		sessionId = "<auto-generated value>"
		dumpOnExit = true
		classDumpDir = null
		output = JacocoTaskExtension.Output.FILE
		address = "localhost"
		port = 6300
		jmx = false
	}
	useJUnitPlatform()
	finalizedBy 'jacocoTestReport'
}

querydsl {
	jpa = true
	querydslSourcesDir = querydslDir
}

sourceSets {
	main.java.srcDir querydslDir
}

compileQuerydsl {
	options.annotationProcessorPath = configurations.querydsl
}